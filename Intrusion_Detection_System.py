#!/usr/bin/python3

#http://kiminewt.github.io/pyshark/
#Get pyshark example code at the above address.

#https://www.tutorialspoint.com/python3/python_basic_syntax.htm
#Get python 3 syntax and examples at the above address.

#https://github.com/asweigart/simple-turtle-tutorial-for-python/blob/master/simple_turtle_tutorial.md
#Get turtle graphics examples and syntax at the above address

import pyshark
import turtle
import time
import collections

global position1_text, position2_text, position3_text
global position1_color, position2_color, position3_color
global position1, position2, position3
global normal_pps
global Spps
global portCount
global color

position1 = (500,500)
position2 = (100,800)
position3 = (880,800)
position1_text = ""
position2_text = ""
position3_text = ""
position1_color = "Green"
position2_color = "Green"
position3_color = "Green"
position1_title = "TCP packets"
position2_title = "Flags"
position3_title = "Dest Addresses"

message_box_start_position = (10,5)
message_box_text_position = (15,220)
message_box_color = "White"

def turtleSetup(): #Setup the "canvas" and the initial state of the 'turtle'
    screen = turtle.Screen()
    screen.setworldcoordinates(0,0,1000,1000)
    screen.title("Network Status")
    newTurtle = turtle.Turtle()
    newTurtle.hideturtle()
    newTurtle.pensize(2)
    newTurtle.speed(0) #Fastest
    
    return newTurtle
    

def chartDisplay(delay, message_box_text, color):
    chart = turtleSetup()

    chart.penup()
    chart.goto(0,0)
    chart.pendown()
    chart.color(color, color)
    chart.begin_fill()
    chart.forward(1100)
    chart.left(90)
    chart.forward(1100)
    chart.left(90)
    chart.forward(1100)
    chart.left(90)
    chart.forward(1100)
    chart.end_fill()
    chart.left(90)

    chart.penup()
    chart.goto(position1)
    chart.goto(chart.xcor(),chart.ycor()+120)
    chart.pendown()
    chart.pencolor("Black")
    chart.write(position1_title,align="center",font=("Ariel",10,"normal"))
    chart.penup()
    chart.goto(position1)
    chart.pencolor(position1_color)
    chart.dot(size=160)
    chart.pencolor("Black")
    chart.write(position1_text,align="center",font=("Ariel",20,"normal"))

    chart.penup()
    chart.goto(position2)
    chart.goto(chart.xcor(),chart.ycor()+120)
    chart.pendown()
    chart.pencolor("Black")
    chart.write(position2_title,align="center",font=("Ariel",10,"normal"))
    chart.penup()
    chart.goto(position2)
    chart.pencolor(position2_color)
    chart.dot(size=160)
    chart.penup()
    chart.goto((position2[0]-30,position2[1]-20))
    chart.pendown()
    chart.pencolor("Black")
    chart.write(position2_text,align="left",font=("Ariel",6,"normal"))

    chart.penup()
    chart.goto(position3)
    chart.goto(chart.xcor(),chart.ycor()+120)
    chart.pendown()
    chart.pencolor("Black")
    chart.write(position3_title,align="center",font=("Ariel",10,"normal"))
    chart.penup()
    chart.goto(position3)
    chart.pencolor(position3_color)
    chart.dot(size=160)
    chart.penup()
    chart.goto((position3[0]-100,position3[1]-20))
    chart.pendown()
    chart.pencolor("Black")
    chart.write(position3_text,align="left",font=("Ariel",6,"normal"))

    chart.penup()
    chart.goto(message_box_start_position)
    chart.pendown()
    chart.begin_fill()
    chart.color("Black","Black")
    chart.pencolor("Black")
    chart.forward(970)
    chart.left(90)
    chart.forward(300)
    chart.left(90)
    chart.forward(970)
    chart.left(90)
    chart.forward(300)
    chart.end_fill()
    chart.penup()
    chart.goto(message_box_text_position)
    chart.pendown()
    chart.pencolor(message_box_color)
    chart.write(message_box_text,align="left",font=("Ariel",10,"normal"))

    time.sleep(delay)
    
pthrshld = 62

def identifier(pC, normal, AC):
    message_box_text = ""
    
    if pC > normal:
        message_box_text += "\nPort Scan in Progress"
    if AC > 20:
        message_box_text += "\nHost Scan in Progress"

    return message_box_text

def colorChange(mbt):
    color = "Red"
    if mbt != "\nPort Scan in Progress" and mbt != "\nHost Scan in Progress":
        color = "White"
    return color

def captureTCPpackets(numSeconds):
    global position1_text, position2_text, position3_text
    global position1_color, position2_color, position3_color

    while True:
        tcp_counter = 0 #counts TCP packets
        destinations = []
        destinations_counter = []
        temp_destinations = [0] #temporary destinations
        flags = []
        flags_counter = []
        temp_flags = [0]
        capture = pyshark.LiveCapture(interface='eth0')
        capture.sniff(timeout=numSeconds)
        message_box_text = str(capture)
        number_of_packets = len(capture)
        message_box_text += "\n" + "Number of packets captured: " + str(number_of_packets)

        data = ""
        portCount = 0
        arp_counter = 0
        if number_of_packets > 1:
            for i in range(1,number_of_packets):
                data = str(capture[i]).split("\t")
                print(data)
                for ii in data:
                    if 'ARP' in ii:
                        arp_counter += 1
                        print("Number of ARPs: " + str(arp_counter))
                    if 'TCP' in ii:
                        tcp_counter += 1
                        for iii in data:
                            if 'Destination' in iii:
                                temp_destinations[0] = (iii.split('Destination')[1].split("\n")[0])
                                destinations.append(temp_destinations[0])
                            if 'Port' in iii:
                                portCount += 1
                                print("Number of ports: " + str(portCount))
                            if ('Flags:' in iii) and ('(' in iii):
                                temp_flags[0] = (iii.split('(')[1].split(')')[0])
                                flags.append(temp_flags[0])
                        break
        else:
            tcp_counter = 0
            flags = "0"
            destinations = "none"
        flags_counter = collections.Counter(flags).most_common()
        flags = ""
        for i in flags_counter:
            flags += str(i) + "\n"
        destinations_counter = collections.Counter(destinations).most_common()
        destinations = ""
					
        for i in destinations_counter:
            if i[1] > 5:
                destinations += str(i) + "\n"
        position1_text = str(tcp_counter)
        position2_text = flags
        position3_text = destinations

       # f = len(list(set(flags)))
     
        message_box_text += identifier(portCount, pthrshld, arp_counter)
        chartDisplay(5, message_box_text, colorChange(identifier(portCount, pthrshld, arp_counter)))




#create a lkist od dest, ip
#ip, port

captureTCPpackets(10)


